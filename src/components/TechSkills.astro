---
type Skill = {
  title: string;
  img: string;
};

type Row = {
  row: Skill[];
};
interface Props {
  skills: Row[];
}

const { skills = [] } = Astro.props;
---

<div class="space-y-10 bg-white py-24 sm:py-32">
  {
    !!skills.length &&
      skills.map((skill) => (
        <div class="mx-auto " data-gsap="skill-wrap">
          <ul
            data-gsap="img-list"
            role="list"
            class="mx-auto flex justify-center space-x-4"
          >
            {skill.row.map((item) => (
              <li class="w-[450px]">
                <img
                  class="aspect-[3/2] w-full rounded-2xl object-cover"
                  src={item.img}
                  alt=""
                />
                <h3 class="mt-6 text-lg font-semibold leading-8 tracking-tight text-gray-900">
                  {item.title}
                </h3>
              </li>
            ))}
          </ul>
        </div>
      ))
  }
</div>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);
  ScrollTrigger.defaults({
    // markers: true,
  });
  gsap.utils
    .toArray<HTMLElement>('[data-gsap="skill-wrap"')
    .forEach((section, index) => {
      const imgList = section.querySelector<HTMLElement>(
        '[data-gsap="img-list"]'
      );
      if (imgList) {
        const [x, xEnd] =
          index % 2
            ? ['100%', (imgList?.scrollWidth - section.offsetWidth) * -1]
            : [imgList?.scrollWidth * -1, 0];
        gsap.fromTo(
          imgList,
          { x },
          {
            x: xEnd,
            scrollTrigger: {
              trigger: section,
              scrub: 0.5,
            },
          }
        );
      }
    });
</script>
